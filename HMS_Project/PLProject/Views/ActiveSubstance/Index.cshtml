@model IPagedList<ActiveSubstanceViewModel>
@using X.PagedList
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Active Substances";
}

<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1 class="mb-4">@ViewData["Title"]</h1>

            <!-- Add a search input for filtering -->
            <!-- Search Form -->
            <form asp-controller="ActiveSubstance" asp-action="Index" method="get" class="mb-3">
                <div class="input-group">
                    <input type="text" name="searchQuery" value="@ViewData["CurrentFilter"]" placeholder="Search by Name" class="form-control" />
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </form>
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>@Html.DisplayNameFor(a => a.FirstOrDefault().ActiveSubstancesName)</th>
                                <th>Details</th>
                                <th>Update</th>
                                <th>Delete</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var substance in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(S=> substance.ActiveSubstancesName)</td>
                                    <partial name="_ButtonsPartial" model="@substance.Id"></partial>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination Controls -->
                <div class="d-flex justify-content-center mt-4">
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = Model.PageNumber - 1, searchQuery = ViewData["CurrentFilter"] })" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link" aria-hidden="true">&laquo;</span>
                                </li>
                            }

                            @for (int i = 1; i <= Model.PageCount; i++)
                            {
                                if (i == Model.PageNumber)
                                {
                                    <li class="page-item active" aria-current="page">
                                        <span class="page-link">@i</span>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { page = i, searchQuery = ViewData["CurrentFilter"] })">@i</a>
                                    </li>
                                }
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = Model.PageNumber + 1, searchQuery = ViewData["CurrentFilter"] })" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link" aria-hidden="true">&raquo;</span>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <!-- Improved empty state with icon and call-to-action -->
                <div class="mt-4 alert alert-warning text-center">
                    <h3><i class="fas fa-exclamation-triangle"></i> No Active Substances Found</h3>
                    <p>You can add new active substances by clicking the button below.</p>
                    <a asp-controller="ActiveSubstance" asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus-circle"></i> Add New Active Substance
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    // Optional: JavaScript to handle search input interaction
    document.getElementById('search-btn').addEventListener('click', function() {
        const query = document.getElementById('search-input').value;
        alert('Search for: ' + query); // Implement search functionality here
    });
</script>
